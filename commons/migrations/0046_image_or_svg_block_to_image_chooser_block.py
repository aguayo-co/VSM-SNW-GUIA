# Generated by Django 4.0.7 on 2022-10-24 16:45
from importlib import import_module

from django.db import migrations
from wagtail.blocks import StreamValue, StructValue
from wagtail.blocks.list_block import ListValue


def remove_svg_support_on_blocks(apps, __):
    """Remove SVG Support backing the current image ID."""
    # TODO @Ramiro
    print("\nMigrating ImageOrSVGBlock to ImageChooserBlock")
    posible_component_names = [
        "image",
        "icon",
        "avatar",
        "background_image",
        "background_illustration",
    ]

    BasePage = import_module("commons.models").BasePage
    for page in BasePage.objects.iterator():
        changed_content = False
        changed_hero = False
        old_content = getattr(page.specific, page.specific.CONTENT_FIELD)
        for component in old_content:
            for posible_component in posible_component_names:
                # First Level Search
                if posible_component in component.value:
                    component.value[posible_component] = component.value[posible_component].value[posible_component]
                    changed_content = True
                    print("\nActualizando componente de imagen en primer nivel de contenido")
                # Third Level Search
                for field in component.value:
                    if isinstance(component.value[field], (StructValue, StreamValue)):
                        for sub_field in component.value[field]._bound_blocks:
                            if posible_component in sub_field.value:
                                sub_field.value[posible_component] = sub_field.value[posible_component][posible_component]
                                changed_content = True
                                print(f"\nActualizando componente de imagen en field {field}, component {component.block.__class__}, página {page.title}")
                                print("Actualizando componente de imagen en segundo nivel de contenido")
                    elif isinstance(component.value[field], ListValue):
                        for sub_field in component.value[field]:
                            if isinstance(sub_field, (StructValue, StreamValue)) and posible_component in sub_field.keys():
                                sub_field[posible_component] = sub_field[posible_component][posible_component]
                                changed_content = True
                                print(f"\nActualizando componente de imagen en field {field}, component {component.block.__class__}, página {page.title}")
                                print("Actualizando componente de imagen en segundo nivel de contenido")

        old_hero = getattr(page.specific, "hero") if hasattr(page.specific, "hero") else []
        for component in old_hero:
            for posible_component in posible_component_names:
                if posible_component in component.value:
                    component.value[posible_component] = component.value[posible_component][posible_component]
                    changed_hero = True
                    print(f"\nActualizando componente de imagen en component {component.block.__class__}, página {page.title}")
                    print("Actualizando componente de imagen en hero")

        if changed_hero or changed_content:
            page.save()
        # if changed_content:
        #     setattr(page.specific, page.specific.CONTENT_FIELD, old_content)
        # if changed_hero:
        #     setattr(page.specific, 'hero', old_hero)


class Migration(migrations.Migration):

    dependencies = [
        ("commons", "0045_remove_basepage_search_image_is_svg_and_more"),
    ]

    operations = [
        migrations.RunPython(remove_svg_support_on_blocks, migrations.RunPython.noop)
    ]
